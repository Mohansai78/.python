# -*- coding: utf-8 -*-
"""Day5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GHZfuXPEhL3hBhipnqcGVUQzFXwZHBbA
"""

l1=[1,2,3,4]

"""expetecd output is =[2,4,6,8]"""

l1*2

l2=[]
for i in l1:
    l2.append(i*2)
print(l2)
#time compexity is 0(n)

t1=(1,2,3,5,5,6)

t1

len(t1)

max(t1)

max("w","e")

max(1,"w","e")

#pythom 3 is error
#python 2 is it compare
35>20

"35">20#python 2 it is True
#python 3 is error

!python --version

a=input("enter the values: ")

t3=tuple(a.split( ))

t3

max("a","2","w","5")

min("a","2","w","5")

l3=[1,2,[1,2,3],4] #list inside list or two dimensional
l3

#list and tuple containers

l3[2][1]

l4=[1,2,["ganesh","radha",3],4]
l4

l4[2][0]

l5=[1,2,["ganesh","radha",3,[1,2,"shimakh"]],4]
l5

l5[2][3][2]

l1

#deleting value from list:
del l1[1]#it takes index value
#del is opposite of assignment operator

l1

a=[10,20,30]

l=10

id(a)

id(l)

del a[0]

id(a[0])

a

id(a[0])

id(l)

a[0]

#indexing definition is changing

a=[10,20,10,30]

id(a[0])==id(a[2])

b=(10,20,10,30)

id(b[0])==id(b[2])

c=b[:]

id(b)==id(c)#it is immutable

d=a[:]

id(a)==id(d)#it is mutable

list1=[1,2,3,4,6,7]
#expetcd ot is [2,4,6]
l6=[]
for i in list1:
    if i%2==1:#remiander
        l6.append(i)
print(l6)

"""#list----->tuple
#tuple---->list
"""

l1=[("2",1),("1",2)]

l1

l1.sort()

l1#it will sort the first occurance of elemnt in tuple

a=1+2j#real value 1, imaginary is 2

a.

a.conjugate()

a.imag#it is printing float

a.real

abs(a)

a=complex(1,2)

a

?complex

b=2

c=float(b)

c

str(2)

2*3

2**3

pow(2,3)

bool(1)

bool("2")

bool()

1+"2"

1+int("2")

1+eval("2")

1+int("w")

1+int(ord("w"))

"""#dictionary"""

#mutable datatype
#it is sequaence
# it is also heterogeneous data type
#collection of key-value pair
#key-value is called item
#keys and values are seperted by ":"
#items are seperated by ","
#keys are immuatble and no duplications
#values mutables it allows duplicates

"""#syntax:
={key:value}
"""

d={}

print("d:", type(d))

d1={1:"a",1:"a",2:"b"}

d1

d2={1:"a",2:"a",3:"b"}

d2

#a string, int or float can be used as key
#a tuple that doent contain any list can be as a key.
#values can be anything ex: list, string, int, float so on.
# values can be change
#keys can not change
#dict dont have indexing instead we use keys are to access any values.
#dict are unordered collection, which means the order is which u have enterd the items in a dict may not be ratined and u may get items in diff. orders.

d3={1:"a",2:"a",3:"b"}

d3.items()

d4=d3.copy()

d4

d4.keys()

d4.values()

#tuple as a key

d5={(1,2):"a",2:"a",3:"b"}

d5

d6={[1,2]:"a",2:"a",3:"b"}

#i cant use list a key

t1=(1,2,[])

t1[2].append(2)

t1

d1

d1[1]

d1[1]=3

d1

d1.clear()

d1

d6={1:"a",2:"a",3:"b"}

d6.pop(1)

d6

d6.popitem()

d6.fromkeys([1,2])

d7={}
d7.fromkeys((1,2))

d7.update([1])

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

car.update([("color", "White")])

print(car)

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

car.setdefault("ganesh","white")

print(car)

car.get("brand","ganesh")

del car["brand"]

car

#upsert update adding both same
#add and insert both are same.

car["bmw"]="mycar"

car

#syntax adding and updating both are same

car

mycar=car.copy()

id(car)==id(mycar)

print(car["model"])

print(car["model1"])

"model1" in car

"model" in car

k=input("enter the key:")
if k in car:
    print(car[k])
else:
    print("not found")

d1={1:1,2:2}
d2={3:3,4:4}

d1.update(d2)

d1

l1=[(1,2),(2,3)]

dict(l1)

l1=([1,2],[2,3])
dict(l1)

d1={1:1,2:2}
d2={2:2,4:4}

d1

d1.update(d2)

#your next dictionary should not contain same item

d=10 milion items

d.keys 10M elements
#time complexity, space complexity python 2

import sys
sys.getsizeof(car.keys())

car["iphone"]="ir"

car

#python space complexity fixed
car.keys()

l=[]
for i in car.keys():
    l.append(i)
print(l)

#range()------>car.keys()
list(range(10))

list(car.keys())

for i in car.values():
    print(i)

for i in car.items():
    print(i)

for i in car.items():
    k,v=i
    print(k,v)

for k,v in car.items():
    #k,v=i
    print(k,v)

#in dictionary the standard for loop syntax is
for k,v in car.items():
    print(k,v)

for k,v in car.items():
    if k=="year":
        del car[k]
    print(k,v)

for k,v in list(car.items()):
    if k=="year":
        del car[k]
    print(k,v)

print(sys.getsizeof(car.items()))

#make a dictionary from list
l1=[[1,2],[3,4]]
dict(l1)

l2=[1,2,3]
dict(l2)

l3=[1,2,3]
l4=["a","b","c"]
len1=min(len(l3),len(l4))#3
dict1={}
for i in range(len1):#0,1,2
    dict1[l3[i]]=l4[i]#adding or updation
print(dict1)

list1=[1,2,3,4]
expected is 1, 4, 9, 16

