# -*- coding: utf-8 -*-
"""Day1.PY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-HA-Bm3BAFlewJA-L2ArJb9VoaTbAIe3
"""

#text editors
#full IDE(integrated developement environment)
#Notebook Environment(Jupiter)

#.py

#keyword is builtin readymade words we cant use anyother purpose

import keyword as kw

print(len(kw.kwlist))

#python case sensitive
#P is not same as p

#SQL case in-sensitive P=p both are same

x=3 #x is variable ligal

False=5 #this illegal

#keywords cannot used as a varibles
#before any characteor the values illegal
#before any characteor the specila character illegal
#in between charactor the speacil character illegal
x10=46

_x=10

t$=26

_=20

x=20

a,b=20

a,b=10,20

a

b

v:r=10:20

a,b,c=10,23,30,30

a,b,*c=10,23,30,30

a

b

c

print('hello world')

#back slash(/)
#forward slash(\)
#tiple quotes(""" """)
#escape sequence of the string(\t)

# Commented out IPython magic to ensure Python compatibility.
#formated output
# %s------> string
# %d------> integer
# %f------> float

"""The variables are reusable purpose

for singlw line commnet use #
Multiple lines of comments

hello
world
"""

x='ganesh'
print(x)

print('ganesh')

print('ganesh's laptop')

print('ganesh\'s laptop')

!python --version

print("ganesh's laptop")# always stick with this

print("ga\nesh")#run cell use shft+enter in your keyboard

print(r"ga\nesh")

print("ja\thin")

print(r"ja\thin")

?print

x

type(x)

id(x)

x1=20

x2=20

print(type(x1))

#In python everything is object

id(x1)

id(x2)

#data types (or) data structures
1.primitive data types                          2. non primitive
int, bytes, str, float, complex, boolean            builtin                                                             user defiend
                                            list, set, tuple, dict, frozenset                    linear                             nonlinear
                                                                                            array, linkedlist, stack, queue         Tree, Graph, Hash, heap

dir(__builtins__)

len(['abs',
 'aiter',
 'all',
 'anext',
 'any',
 'ascii',
 'bin',
 'bool',
 'breakpoint',
 'bytearray',
 'bytes',
 'callable',
 'chr',
 'classmethod',
 'compile',
 'complex',
 'copyright',
 'credits',
 'delattr',
 'dict',
 'dir',
 'display',
 'divmod',
 'enumerate',
 'eval',
 'exec',
 'execfile',
 'filter',
 'float',
 'format',
 'frozenset',
 'get_ipython',
 'getattr',
 'globals',
 'hasattr',
 'hash',
 'help',
 'hex',
 'id',
 'input',
 'int',
 'isinstance',
 'issubclass',
 'iter',
 'len',
 'license',
 'list',
 'locals',
 'map',
 'max',
 'memoryview',
 'min',
 'next',
 'object',
 'oct',
 'open',
 'ord',
 'pow',
 'print',
 'property',
 'range',
 'repr',
 'reversed',
 'round',
 'runfile',
 'set',
 'setattr',
 'slice',
 'sorted',
 'staticmethod',
 'str',
 'sum',
 'super',
 'tuple',
 'type',
 'vars',
 'zip'])

#those are working with jupiter notebook to know the syntax or description of any function/method use shift+tab

#idle help("print")

?eval

type(eval("20"))#it is very power full function to remove the quatation

x="20"

x

eval("ganesh")

eval("20+30+10")#the otput is 60

#datascience boss is asking log files client is given requermnt completely unstructured

x="Ganesh"

dir(x)

#builtin functions are applicable all datatypes
#methods are specific to few data types

#() paranthesis
#[] square bracket
#{} curl bracket
#! escalation mark
# ~ tilde
# _ undersco
# - highen
# * asteric
# & ampersand

x.capitalize()

x.casefold()

c="ganesh"

c.center(20)

?c.center

r = "Python"
new_string = r.center(24)
print(new_string)

# Output: ***Python is awesome****

g="ganesh radharam"

g.count("a")

g.endswith("a")#this is power full function

a="a\ts\ts"

a.expandtabs(0)

